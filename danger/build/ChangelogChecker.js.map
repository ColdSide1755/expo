{"version":3,"file":"ChangelogChecker.js","sourceRoot":"","sources":["../src/ChangelogChecker.ts"],"names":[],"mappings":"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","sourcesContent":["// Provides dev-time typing structure for  `danger` - doesn't affect runtime.\nimport { DangerDSLType } from 'danger/distribution/dsl/DangerDSL';\nimport * as fs from 'fs';\nimport { groupBy } from 'lodash';\nimport * as path from 'path';\nimport spawnAsync from '@expo/spawn-async';\n\nimport { GithubWrapper } from './GithubWrapper';\nimport { getExpoRepositoryRootDir } from './Utils';\n\ndeclare var danger: DangerDSLType;\ndeclare function message(message: string): void;\ndeclare function warn(message: string): void;\ndeclare function fail(message: string): void;\ndeclare function markdown(message: string): void;\n\nconst DEFAULT_CHANGELOG_ENTRY_KEY = 'default';\n\nenum ChangelogEntryType {\n  BUG_FIXES = 'bug-fix',\n  NEW_FEATURES = 'new-feature',\n  BREAKING_CHANGES = 'breaking-change',\n}\n\nconst DEFAULT_ENTRY_TYPE = ChangelogEntryType.BUG_FIXES;\n\ntype ChangelogEntry = {\n  type: ChangelogEntryType;\n  message: string;\n};\n\ntype PackageChangelogEntry = ChangelogEntry & {\n  packageName: string;\n};\n\ntype ChangelogEntries = {\n  [DEFAULT_CHANGELOG_ENTRY_KEY]: ChangelogEntry;\n  [key: string]: ChangelogEntry;\n};\n\n// Setup\nconst pr = danger.github.pr;\nconst modifiedFiles = danger.git.modified_files;\nconst prAuthor = pr.base.user.login;\nconst github = new GithubWrapper(danger.github.api, prAuthor, pr.base.repo.name);\n\n/**\n * @param packageName for example: `expo-image-picker` or `unimodules-constatns-interface`\n * @returns relative path to package's changelog. For example: `packages/expo-image-picker/CHANGELOG.md`\n */\nfunction getPackageChangelogPath(packageName: string): string {\n  return path.join('packages', packageName, 'CHANGELOG.md');\n}\n\nasync function getFileContentAsync(path: string): Promise<string> {\n  const buffer = await fs.promises.readFile(path);\n  return buffer.toString();\n}\n\nasync function getFileDiffAsync(path): Promise<string> {\n  const { stdout } = await spawnAsync('git', ['diff', '--', path], {\n    cwd: getExpoRepositoryRootDir(),\n  });\n  return stdout;\n}\n\nfunction getTags(\n  entry: string\n): { packageName: string | typeof DEFAULT_CHANGELOG_ENTRY_KEY; type: ChangelogEntryType } | null {\n  const result = {\n    type: DEFAULT_ENTRY_TYPE,\n    packageName: DEFAULT_CHANGELOG_ENTRY_KEY,\n  };\n\n  const tags = entry.match(/\\[[^\\]]*\\]/g);\n  if (!tags) {\n    return result;\n  }\n  if (tags.length > 2) {\n    return null;\n  }\n\n  for (const tag of tags) {\n    switch (true) {\n      case /\\[[\\s-_]*(bug)?[\\s-_]*fix[\\s-_]*\\]/i.test(tag):\n        result.type = ChangelogEntryType.BUG_FIXES;\n        break;\n      case /\\[[\\s-_]*(new)?[\\s-_]*feature(s)?[\\s-_]*\\]/i.test(tag):\n        result.type = ChangelogEntryType.NEW_FEATURES;\n        break;\n      case /\\[[\\s-_]*breaking[\\s-_]*(change)?[\\s-_]*\\]/i.test(tag):\n        result.type = ChangelogEntryType.BREAKING_CHANGES;\n        break;\n      default:\n        result['packageName'] = tag.replace(/\\[|\\]/g, '').trim();\n    }\n  }\n\n  return result;\n}\n\n/**\n * Get suggested changelog entries from PR.\n *\n * If PR doesn't contais `# Changelog` section, this method returns:\n * {\n *   [DEFAULT_CHANGELOG_ENTRY_KEY]: <title of this pr without tags>\n * }\n * Otherwise, it tries to parse PR's body.\n */\nfunction getChangelogSuggestionFromPR(): ChangelogEntries {\n  const changelogEntries = {\n    [DEFAULT_CHANGELOG_ENTRY_KEY]: {\n      type: DEFAULT_ENTRY_TYPE,\n      message: pr.title.replace(/\\[.*\\]/, '').trim(),\n    },\n  };\n\n  const changelogTag = pr.body.match(/#\\schangelog(([^#]*?)\\s?)*/i)?.[0]?.replace(/^-/, '');\n  if (changelogTag) {\n    changelogTag\n      .split('\\n')\n      .slice(1)\n      .map(line => line.trim())\n      .filter(line => line.length > 0)\n      .forEach(line => {\n        const tags = getTags(line);\n        if (!tags) {\n          warn(`Cound't parse tags from PR's body. Line: ${line}.`);\n          return;\n        }\n\n        if (tags.packageName) {\n          changelogEntries[tags.packageName] = {\n            type: tags.type,\n            message: line.replace(/\\[.*\\]/, '').trim(),\n          };\n        }\n      });\n  }\n\n  return changelogEntries;\n}\n\n/**\n * Check if the changelog was modified.\n * If `CHANGELOG.md` doesn't exist in provided package, it returns false.\n */\nfunction wasChangelogModified(packageName: string, modifiedFiles: string[]): boolean {\n  const changelogPath = getPackageChangelogPath(packageName);\n\n  return (\n    modifiedFiles.includes(changelogPath) ||\n    !fs.existsSync(path.join(getExpoRepositoryRootDir(), changelogPath))\n  );\n}\n\nfunction getPackagesWithoutChangelogEntry(modifiedPackages: { [Key: string]: string[] }): string[] {\n  return Object.keys(modifiedPackages).filter(\n    packageName => !wasChangelogModified(packageName, modifiedPackages[packageName])\n  );\n}\n\nfunction getSuggestedChangelogEntries(\n  packagesWithoutChangelogEntry: string[]\n): PackageChangelogEntry[] {\n  const {\n    DEFAULT_CHANGELOG_ENTRY_KEY: defaultEntry,\n    ...suggestedEntries\n  } = getChangelogSuggestionFromPR();\n\n  return packagesWithoutChangelogEntry.map(packageName => {\n    const message = suggestedEntries[packageName]?.message ?? defaultEntry.message;\n    const type = suggestedEntries[packageName]?.type ?? defaultEntry.type;\n    return {\n      packageName,\n      message,\n      type,\n    };\n  });\n}\n\nasync function runAddChangelogCommand(\n  suggestedEntries: PackageChangelogEntry[]\n): Promise<Array<PackageChangelogEntry & { content: string; diff: string }>> {\n  await Promise.all(\n    suggestedEntries.map(entry =>\n      spawnAsync('et', [\n        `add-changelog`,\n        `--package`,\n        entry.packageName,\n        `--entry`,\n        entry.message,\n        `--author`,\n        prAuthor,\n        `--type`,\n        entry.type,\n        `--pullRequest`,\n        `${pr.number}`,\n      ])\n    )\n  );\n\n  return Promise.all(\n    suggestedEntries.map(async entry => {\n      const changelogPath = path.join(\n        getExpoRepositoryRootDir(),\n        getPackageChangelogPath(entry.packageName)\n      );\n      return {\n        ...entry,\n        content: await getFileContentAsync(changelogPath),\n        diff: await getFileDiffAsync(changelogPath),\n      };\n    })\n  );\n}\n\n// @ts-ignore\nasync function createOrUpdateRP(\n  missingEntries: { packageName: string; content: string }[]\n): Promise<string | null> {\n  const dangerHeadRef = `@danger/add-missing-changelog-to-${pr.number}`;\n  const dangerBaseRef = pr.head.ref;\n  const dangerMessage = `Add missing changelog`;\n  const dangerTags = `[danger][bot]`;\n\n  const fileMap = missingEntries.reduce(\n    (prev, current) => ({\n      ...prev,\n      [getPackageChangelogPath(current.packageName)]: current.content,\n    }),\n    {}\n  );\n\n  await github.createOrUpdateBranchFromFileMap(fileMap, {\n    baseBranchName: dangerBaseRef,\n    branchName: dangerHeadRef,\n    message: `${dangerTags} ${dangerMessage}`,\n  });\n\n  const prs = await github.getOpenPR({\n    fromBranch: dangerHeadRef,\n    toBranch: dangerBaseRef,\n  });\n\n  if (prs.length > 1) {\n    warn(\"Couldn't find a correct pull request. Too many open ones.\");\n    return null;\n  }\n\n  if (prs.length === 1) {\n    return prs[0].html_url;\n  }\n\n  const { html_url } = await github.openPR({\n    fromBranch: dangerHeadRef,\n    toBranch: dangerBaseRef,\n    title: `${dangerTags} ${dangerMessage} to #${pr.number}`,\n    body: `${dangerMessage} to #${pr.number}`,\n  });\n\n  return html_url;\n}\n\n// @ts-ignore\nfunction generateReport(\n  missingEntries: Array<{ packageName: string; diff: string }>,\n  url?: string | null\n) {\n  const message = missingEntries\n    .map(\n      entry =>\n        `- <code>${danger.github.utils.fileLinks(\n          [getPackageChangelogPath(entry.packageName)],\n          false\n        )}</code>`\n    )\n    .join('\\n');\n\n  const diff = '```diff\\n' + missingEntries.map(entry => entry.diff).join('\\n') + '```\\n';\n  const pr = url ? `#### or merge this pull request: ${url}` : '';\n  fail(`\n📋 **Missing Changelog**\n------\n🛠 Add missing entires to:\n${message}`);\n\n  markdown(\n    `\n### 🛠 Suggested fixes:\n\n<details>\n  <summary>📋 Missing changelog</summary>\n\n  #### Apply suggested changes:\n${diff}\n${pr} \n</details>`\n  );\n}\n\nexport async function changelogCheck(): Promise<void> {\n  const modifiedPackages = groupBy(\n    modifiedFiles.filter(file => file.startsWith('packages')),\n    file => file.split(path.sep)[1]\n  );\n\n  const packagesWithoutChangelogEntry = getPackagesWithoutChangelogEntry(modifiedPackages);\n  if (packagesWithoutChangelogEntry.length === 0) {\n    message(`✅ **Changelog**`);\n    return;\n  }\n\n  const suggestedEntries = getSuggestedChangelogEntries(packagesWithoutChangelogEntry);\n  const fixedEntries = await runAddChangelogCommand(suggestedEntries);\n  const url = await createOrUpdateRP(fixedEntries);\n  await generateReport(fixedEntries, url);\n}\n"]}